//! Vulnerability database implementation

pub mod java_db;
pub mod npm_db;
pub mod python_db;
pub mod updater;

use anyhow::Result;
use std::path::Path;

pub use crate::core::VulnerabilityDatabase;

/// Create NPM vulnerability database
pub fn create_npm_database() -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(npm_db::NpmVulnerabilityDb::new()?))
}

/// Create NPM vulnerability database with custom path
pub fn create_npm_database_with_path(path: &Path) -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(npm_db::NpmVulnerabilityDb::with_path(path)?))
}

/// Create Python vulnerability database
pub fn create_python_database() -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(python_db::PythonVulnerabilityDb::new()?))
}

/// Create Python vulnerability database with custom path
pub fn create_python_database_with_path(path: &Path) -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(python_db::PythonVulnerabilityDb::with_path(path)?))
}

/// Create Java vulnerability database
pub fn create_java_database() -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(java_db::JavaVulnerabilityDb::new()?))
}

/// Create Java vulnerability database with custom path
pub fn create_java_database_with_path(path: &Path) -> Result<Box<dyn VulnerabilityDatabase>> {
    Ok(Box::new(java_db::JavaVulnerabilityDb::with_path(path)?))
}
