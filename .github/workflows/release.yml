name: Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.2.3)'
        required: true
        type: string
      prerelease:
        description: 'Mark as prerelease'
        required: false
        type: boolean
        default: false

env:
  CARGO_TERM_COLOR: always

jobs:
  # Validate release conditions
  validate-release:
    name: Validate Release
    runs-on: ubuntu-latest
    outputs:
      version: ${{ steps.version.outputs.version }}
      is_prerelease: ${{ steps.version.outputs.is_prerelease }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Determine version
        id: version
        run: |
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]]; then
            VERSION="${{ github.event.inputs.version }}"
            IS_PRERELEASE="${{ github.event.inputs.prerelease }}"
          else
            VERSION="${{ github.ref_name }}"
            IS_PRERELEASE="false"
            if [[ "$VERSION" =~ -[a-zA-Z] ]]; then
              IS_PRERELEASE="true"
            fi
          fi
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "is_prerelease=$IS_PRERELEASE" >> $GITHUB_OUTPUT
          echo "Release version: $VERSION (prerelease: $IS_PRERELEASE)"

      - name: Validate version format
        run: |
          VERSION="${{ steps.version.outputs.version }}"
          if [[ ! "$VERSION" =~ ^v[0-9]+\.[0-9]+\.[0-9]+(-[a-zA-Z0-9\.-]+)?$ ]]; then
            echo "Invalid version format: $VERSION"
            echo "Expected format: v1.2.3 or v1.2.3-alpha.1"
            exit 1
          fi

  # Run full test suite before release
  pre-release-tests:
    name: Pre-Release Tests
    needs: validate-release
    uses: ./.github/workflows/ci.yml

  # Build release artifacts for all platforms
  build-release-artifacts:
    name: Build Release Artifacts
    needs: [validate-release, pre-release-tests]
    strategy:
      matrix:
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-x64
          - target: x86_64-unknown-linux-musl
            os: ubuntu-latest
            name: linux-x64-musl
          - target: aarch64-unknown-linux-gnu
            os: ubuntu-latest
            name: linux-arm64
          - target: x86_64-pc-windows-msvc
            os: windows-latest
            name: windows-x64
          - target: x86_64-apple-darwin
            os: macos-latest
            name: macos-x64
          - target: aarch64-apple-darwin
            os: macos-latest
            name: macos-arm64
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: release-${{ matrix.target }}

      - name: Install cross (for cross-compilation)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cargo install cross --git https://github.com/cross-rs/cross

      - name: Build release binary (native)
        if: matrix.os != 'ubuntu-latest' || matrix.target == 'x86_64-unknown-linux-gnu'
        run: cargo build --release --target ${{ matrix.target }}

      - name: Build release binary (cross-compile)
        if: matrix.os == 'ubuntu-latest' && matrix.target != 'x86_64-unknown-linux-gnu'
        run: cross build --release --target ${{ matrix.target }}

      - name: Create release archive (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p release
          cp target/${{ matrix.target }}/release/file-scanner release/
          cp README.md LICENSE release/ 2>/dev/null || true
          
          cd release
          tar -czf file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz *
          cd ..
          mv release/file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz .

      - name: Create release archive (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir release
          copy target\${{ matrix.target }}\release\file-scanner.exe release\
          copy README.md release\ 2>nul || echo "README.md not found"
          copy LICENSE release\ 2>nul || echo "LICENSE not found"
          
          cd release
          tar -czf file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz *
          cd ..
          move release\file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz .

      - name: Generate checksums
        run: |
          if [[ "${{ matrix.os }}" == "windows-latest" ]]; then
            certutil -hashfile file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz SHA256 > file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          else
            shasum -a 256 file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz > file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          fi

      - name: Upload release artifacts
        uses: actions/upload-artifact@v4
        with:
          name: release-${{ matrix.name }}
          path: |
            file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz
            file-scanner-${{ needs.validate-release.outputs.version }}-${{ matrix.name }}.tar.gz.sha256
          retention-days: 5

  # Generate changelog
  generate-changelog:
    name: Generate Changelog
    needs: validate-release
    runs-on: ubuntu-latest
    outputs:
      changelog: ${{ steps.changelog.outputs.changelog }}
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Generate changelog
        id: changelog
        run: |
          # Get the previous tag
          PREVIOUS_TAG=$(git tag --sort=-version:refname | grep -E '^v[0-9]+\.[0-9]+\.[0-9]+' | head -2 | tail -1 || echo "")
          CURRENT_TAG="${{ needs.validate-release.outputs.version }}"
          
          echo "Generating changelog from $PREVIOUS_TAG to $CURRENT_TAG"
          
          # Generate changelog content
          CHANGELOG="## Changes in $CURRENT_TAG\n\n"
          
          if [[ -n "$PREVIOUS_TAG" ]]; then
            # Get commits since last tag
            COMMITS=$(git log --pretty=format:"- %s" "$PREVIOUS_TAG..HEAD" | head -50)
            if [[ -n "$COMMITS" ]]; then
              CHANGELOG+="### Commits\n$COMMITS\n\n"
            fi
            
            # Get merged PRs (simplified)
            PRS=$(git log --pretty=format:"%s" --grep="Merge pull request" "$PREVIOUS_TAG..HEAD" | sed 's/Merge pull request #\([0-9]*\) from .*/- PR #\1/' | head -20)
            if [[ -n "$PRS" ]]; then
              CHANGELOG+="### Pull Requests\n$PRS\n\n"
            fi
            
            # Full changeset link
            CHANGELOG+="**Full Changeset**: https://github.com/${{ github.repository }}/compare/$PREVIOUS_TAG...$CURRENT_TAG"
          else
            CHANGELOG+="Initial release of ThreatFlux File Scanner\n\n"
            CHANGELOG+="### Features\n"
            CHANGELOG+="- Comprehensive file analysis with metadata extraction\n"
            CHANGELOG+="- Multi-format hash calculation (MD5, SHA256, SHA512, BLAKE3)\n"
            CHANGELOG+="- String extraction and pattern matching\n"
            CHANGELOG+="- Binary format analysis (PE/ELF/Mach-O)\n"
            CHANGELOG+="- Digital signature verification\n"
            CHANGELOG+="- Hex dump capabilities\n"
            CHANGELOG+="- MCP server integration\n"
            CHANGELOG+="- NPM and Python package security analysis\n"
            CHANGELOG+="- Performance optimized with async processing\n"
          fi
          
          # Save changelog to file and output
          echo -e "$CHANGELOG" > RELEASE_CHANGELOG.md
          
          # For GitHub output, we need to handle multiline properly
          {
            echo 'changelog<<EOF'
            echo -e "$CHANGELOG"
            echo 'EOF'
          } >> $GITHUB_OUTPUT

      - name: Upload changelog
        uses: actions/upload-artifact@v4
        with:
          name: changelog
          path: RELEASE_CHANGELOG.md
          retention-days: 5

  # Create GitHub release
  create-release:
    name: Create GitHub Release
    needs: [validate-release, build-release-artifacts, generate-changelog]
    runs-on: ubuntu-latest
    permissions:
      contents: write
      
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          merge-multiple: true

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ needs.validate-release.outputs.version }}
          name: ${{ needs.validate-release.outputs.version }}
          body: ${{ needs.generate-changelog.outputs.changelog }}
          prerelease: ${{ needs.validate-release.outputs.is_prerelease == 'true' }}
          files: |
            file-scanner-*.tar.gz
            file-scanner-*.tar.gz.sha256
          generate_release_notes: true
          append_body: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Update library versions (for workspace coordination)
  update-versions:
    name: Update Library Versions
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is_prerelease == 'false'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Install cargo-edit
        run: cargo install cargo-edit

      - name: Update workspace versions
        run: |
          VERSION="${{ needs.validate-release.outputs.version }}"
          # Remove 'v' prefix for cargo
          CARGO_VERSION="${VERSION#v}"
          
          # Update main package version
          cargo set-version "$CARGO_VERSION"
          
          # Update all workspace members to the same version
          for manifest in file-scanner-*/Cargo.toml; do
            if [[ -f "$manifest" ]]; then
              cd "$(dirname "$manifest")"
              cargo set-version "$CARGO_VERSION"
              cd ..
            fi
          done

      - name: Commit version updates
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add -A
          git diff --staged --quiet || git commit -m "chore: bump version to ${{ needs.validate-release.outputs.version }}"
          git push

  # Publish to crates.io (optional, requires API token)
  publish-crates:
    name: Publish to Crates.io
    needs: [validate-release, create-release]
    runs-on: ubuntu-latest
    if: needs.validate-release.outputs.is_prerelease == 'false' && vars.PUBLISH_TO_CRATES == 'true'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Publish libraries to crates.io
        env:
          CARGO_REGISTRY_TOKEN: ${{ secrets.CARGO_REGISTRY_TOKEN }}
        run: |
          # Publish libraries in dependency order
          LIBRARIES=(
            "file-scanner-core"
            "file-scanner-metadata"
            "file-scanner-hash"
            "file-scanner-strings"
            "file-scanner-binary"
            "file-scanner-signature"
            "file-scanner-hexdump"
            "file-scanner-cache"
            "file-scanner-npm"
            "file-scanner-python"
            "file-scanner-mcp"
          )
          
          for lib in "${LIBRARIES[@]}"; do
            if [[ -d "$lib" ]]; then
              echo "Publishing $lib..."
              cd "$lib"
              cargo publish --allow-dirty || echo "Failed to publish $lib (may already exist)"
              cd ..
              sleep 30  # Wait for crates.io to process
            fi
          done
          
          # Finally publish main binary crate
          echo "Publishing main crate..."
          cargo publish --allow-dirty || echo "Failed to publish main crate (may already exist)"

  # Notify on release completion
  notify-completion:
    name: Notify Release Completion
    needs: [validate-release, create-release, update-versions]
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Release Summary
        run: |
          echo "# Release Summary" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Version:** ${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          echo "**Prerelease:** ${{ needs.validate-release.outputs.is_prerelease }}" >> $GITHUB_STEP_SUMMARY
          echo "**Release Status:** ${{ needs.create-release.result }}" >> $GITHUB_STEP_SUMMARY
          echo "" >> $GITHUB_STEP_SUMMARY
          echo "**Release URL:** https://github.com/${{ github.repository }}/releases/tag/${{ needs.validate-release.outputs.version }}" >> $GITHUB_STEP_SUMMARY
          
          if [[ "${{ needs.create-release.result }}" == "success" ]]; then
            echo "✅ Release created successfully!" >> $GITHUB_STEP_SUMMARY
          else
            echo "❌ Release creation failed!" >> $GITHUB_STEP_SUMMARY
          fi