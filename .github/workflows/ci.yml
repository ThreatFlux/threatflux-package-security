name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast checks that run first to provide quick feedback
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: quick-checks

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy (deny warnings)
        run: cargo clippy --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Comprehensive testing across platforms and Rust versions
  test:
    name: Test Suite
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.75.0] # MSRV
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
    
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-${{ matrix.rust }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl

      - name: Build library
        run: cargo build --all-features

      - name: Run library tests
        run: cargo test --all-features --verbose

      - name: Run doctests
        run: cargo test --doc --all-features

  # Feature testing
  feature-tests:
    name: Feature Tests
    needs: quick-checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        features: 
          - default
          - concurrent
          - offline
          - "concurrent,offline"
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: feature-test-${{ matrix.features }}

      - name: Test with features
        run: cargo test --features "${{ matrix.features }}" --verbose

  # Integration testing
  integration-tests:
    name: Integration Tests
    needs: [test, feature-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: integration-tests

      - name: Run integration tests
        run: cargo test --test integration_test --all-features --verbose

      - name: Run comprehensive tests
        run: cargo test --test comprehensive_test --all-features --verbose

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    needs: quick-checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: benchmarks

      - name: Run benchmarks
        run: |
          # Run benchmarks if they exist
          if cargo bench --help >/dev/null 2>&1; then
            cargo bench 2>&1 | tee benchmark_results.txt
          else
            echo "No benchmarks found" | tee benchmark_results.txt
          fi

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt
          if-no-files-found: ignore

  # Code coverage
  coverage:
    name: Code Coverage
    needs: quick-checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate coverage report
        run: cargo llvm-cov --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Library verification across platforms
  cross-platform-verify:
    name: Cross-Platform Verification
    needs: [test, integration-tests]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: verify-${{ matrix.target }}

      - name: Check library builds for target
        run: cargo check --target ${{ matrix.target }} --all-features

      - name: Run tests for target (if native)
        if: matrix.target == 'x86_64-unknown-linux-gnu' || matrix.target == 'x86_64-pc-windows-msvc' || matrix.target == 'x86_64-apple-darwin'
        run: cargo test --target ${{ matrix.target }} --all-features

  # Final status check
  ci-success:
    name: CI Success
    needs: 
      - quick-checks
      - test
      - feature-tests
      - integration-tests
      - coverage
      - cross-platform-verify
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.quick-checks.result }}" != "success" ]]; then
            echo "Quick checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.feature-tests.result }}" != "success" ]]; then
            echo "Feature tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.cross-platform-verify.result }}" != "success" ]]; then
            echo "Cross-platform verification failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"