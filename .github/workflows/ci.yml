name: CI

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  # Fast checks that run first to provide quick feedback
  quick-checks:
    name: Quick Checks
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: rustfmt, clippy

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: quick-checks

      - name: Check formatting
        run: cargo fmt --all -- --check

      - name: Check clippy (deny warnings)
        run: cargo clippy --workspace --all-targets --all-features -- -D warnings

      - name: Check documentation
        run: cargo doc --workspace --all-features --no-deps --document-private-items
        env:
          RUSTDOCFLAGS: "-D warnings"

  # Comprehensive testing across platforms and Rust versions
  test:
    name: Test Suite
    needs: quick-checks
    strategy:
      fail-fast: false
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]
        rust: [stable, beta, 1.75.0] # MSRV
        include:
          - os: ubuntu-latest
            rust: nightly
            experimental: true
    
    runs-on: ${{ matrix.os }}
    continue-on-error: ${{ matrix.experimental == true }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@master
        with:
          toolchain: ${{ matrix.rust }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: test-${{ matrix.os }}-${{ matrix.rust }}

      - name: Install system dependencies (Ubuntu)
        if: matrix.os == 'ubuntu-latest'
        run: |
          sudo apt-get update
          sudo apt-get install -y pkg-config libssl-dev

      - name: Install system dependencies (macOS)
        if: matrix.os == 'macos-latest'
        run: |
          brew install pkg-config openssl

      - name: Build workspace
        run: cargo build --workspace --all-features

      - name: Run workspace tests
        run: cargo test --workspace --all-features --verbose

      - name: Run doctests
        run: cargo test --workspace --doc --all-features

  # Library-specific testing with feature flags
  library-tests:
    name: Library Tests
    needs: quick-checks
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        library: 
          - file-scanner-core
          - file-scanner-metadata
          - file-scanner-hash
          - file-scanner-strings
          - file-scanner-binary
          - file-scanner-signature
          - file-scanner-hexdump
          - file-scanner-cache
          - file-scanner-npm
          - file-scanner-python
          - file-scanner-mcp
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: lib-test-${{ matrix.library }}

      - name: Test library (default features)
        run: cargo test -p ${{ matrix.library }}

      - name: Test library (no features)
        run: cargo test -p ${{ matrix.library }} --no-default-features

      - name: Test library (all features)
        run: cargo test -p ${{ matrix.library }} --all-features

  # Integration testing
  integration-tests:
    name: Integration Tests
    needs: [test, library-tests]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: integration-tests

      - name: Build release binary
        run: cargo build --release

      - name: Test CLI functionality
        run: |
          # Test basic file analysis
          ./target/release/file-scanner Cargo.toml --format json > test_output.json
          test -s test_output.json || exit 1
          
          # Test MCP server startup (short-lived)
          timeout 5s ./target/release/file-scanner mcp-stdio || test $? -eq 124

      - name: Test with test files
        run: |
          # Create test files for analysis
          echo "test content" > test_file.txt
          echo -e "\x7fELF" > test_binary
          
          # Test various analysis modes
          ./target/release/file-scanner test_file.txt --strings --hex-dump
          ./target/release/file-scanner test_binary --binary-info

  # Performance benchmarks
  benchmarks:
    name: Performance Benchmarks
    needs: quick-checks
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: benchmarks

      - name: Run benchmarks
        run: |
          # Run benchmarks if they exist
          if cargo bench --help >/dev/null 2>&1; then
            cargo bench --workspace 2>&1 | tee benchmark_results.txt
          else
            echo "No benchmarks found"
          fi

      - name: Upload benchmark results
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-results
          path: benchmark_results.txt
          if-no-files-found: ignore

  # Code coverage
  coverage:
    name: Code Coverage
    needs: quick-checks
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          components: llvm-tools-preview

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: coverage

      - name: Install cargo-llvm-cov
        uses: taiki-e/install-action@cargo-llvm-cov

      - name: Generate coverage report
        run: cargo llvm-cov --workspace --all-features --lcov --output-path lcov.info

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: lcov.info
          flags: unittests
          name: codecov-umbrella
          token: ${{ secrets.CODECOV_TOKEN }}
          fail_ci_if_error: false

  # Build artifacts for multiple platforms
  build-artifacts:
    name: Build Artifacts
    needs: [test, integration-tests]
    strategy:
      matrix:
        target:
          - x86_64-unknown-linux-gnu
          - x86_64-pc-windows-msvc
          - x86_64-apple-darwin
          - aarch64-apple-darwin
        include:
          - target: x86_64-unknown-linux-gnu
            os: ubuntu-latest
          - target: x86_64-pc-windows-msvc
            os: windows-latest
          - target: x86_64-apple-darwin
            os: macos-latest
          - target: aarch64-apple-darwin
            os: macos-latest
    
    runs-on: ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable
        with:
          targets: ${{ matrix.target }}

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: build-${{ matrix.target }}

      - name: Build for target
        run: cargo build --release --target ${{ matrix.target }}

      - name: Prepare artifact (Unix)
        if: matrix.os != 'windows-latest'
        run: |
          mkdir -p artifacts
          cp target/${{ matrix.target }}/release/file-scanner artifacts/file-scanner-${{ matrix.target }}
          chmod +x artifacts/file-scanner-${{ matrix.target }}

      - name: Prepare artifact (Windows)
        if: matrix.os == 'windows-latest'
        run: |
          mkdir artifacts
          copy target\${{ matrix.target }}\release\file-scanner.exe artifacts\file-scanner-${{ matrix.target }}.exe

      - name: Upload artifacts
        uses: actions/upload-artifact@v4
        with:
          name: file-scanner-${{ matrix.target }}
          path: artifacts/
          retention-days: 30

  # MCP Server Testing
  mcp-tests:
    name: MCP Server Tests
    needs: [test]
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Install Rust toolchain
        uses: dtolnay/rust-toolchain@stable

      - name: Setup Rust cache
        uses: Swatinem/rust-cache@v2
        with:
          key: mcp-tests

      - name: Install Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: Install MCP Inspector
        run: npm install -g @modelcontextprotocol/inspector

      - name: Build file-scanner
        run: cargo build --release

      - name: Test MCP STDIO transport
        run: |
          # Test that MCP server starts and responds to basic commands
          timeout 10s npx @modelcontextprotocol/inspector --cli \
            ./target/release/file-scanner mcp-stdio \
            --method tools/list || test $? -eq 124

      - name: Test MCP HTTP transport
        run: |
          # Start HTTP server in background
          ./target/release/file-scanner mcp-http --port 3001 &
          SERVER_PID=$!
          
          # Wait for server to start
          sleep 3
          
          # Test health endpoint
          curl -f http://localhost:3001/health || exit 1
          
          # Clean up
          kill $SERVER_PID || true

  # Final status check
  ci-success:
    name: CI Success
    needs: 
      - quick-checks
      - test
      - library-tests
      - integration-tests
      - coverage
      - build-artifacts
      - mcp-tests
    runs-on: ubuntu-latest
    if: always()
    
    steps:
      - name: Check all jobs success
        run: |
          if [[ "${{ needs.quick-checks.result }}" != "success" ]]; then
            echo "Quick checks failed"
            exit 1
          fi
          if [[ "${{ needs.test.result }}" != "success" ]]; then
            echo "Tests failed"
            exit 1
          fi
          if [[ "${{ needs.library-tests.result }}" != "success" ]]; then
            echo "Library tests failed"
            exit 1
          fi
          if [[ "${{ needs.integration-tests.result }}" != "success" ]]; then
            echo "Integration tests failed"
            exit 1
          fi
          if [[ "${{ needs.build-artifacts.result }}" != "success" ]]; then
            echo "Build artifacts failed"
            exit 1
          fi
          if [[ "${{ needs.mcp-tests.result }}" != "success" ]]; then
            echo "MCP tests failed"
            exit 1
          fi
          echo "All CI jobs passed successfully!"